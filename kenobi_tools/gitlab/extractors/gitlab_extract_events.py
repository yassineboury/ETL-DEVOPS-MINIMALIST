"""
Extracteur d'√©v√©nements GitLab - VERSION REFACTORIS√âE
Module pour extraire les √©v√©nements GitLab avec complexit√© cognitive r√©duite
"""

import pandas as pd
from datetime import datetime, timedelta
from typing import Optional, List, Dict, Any

from kenobi_tools.utils.date_utils import format_gitlab_date


class EventExtractor:
    """Extracteur d'√©v√©nements GitLab simplifi√©"""
    
    @staticmethod
    def extract_events_by_project(
        gl_client,
        projects: List[Dict[str, Any]],
        after_date: Optional[str] = None,
        before_date: Optional[str] = None,
        max_projects: Optional[int] = None
    ) -> pd.DataFrame:
        """
        Extrait les √©v√©nements pour une liste de projets
        
        Args:
            gl_client: Client GitLab authentifi√©
            projects: Liste des projets √† traiter
            after_date: Date de d√©but (ISO format)
            before_date: Date de fin (ISO format)
            max_projects: Limite du nombre de projets √† traiter
            
        Returns:
            DataFrame avec tous les √©v√©nements
        """
        print("üîç Extraction des √©v√©nements GitLab...")
        
        if not projects:
            print("‚ö†Ô∏è Aucun projet fourni pour l'extraction d'√©v√©nements")
            return pd.DataFrame()
        
        # Limiter le nombre de projets si sp√©cifi√©
        projects_to_process = projects[:max_projects] if max_projects else projects
        print(f"üìä Traitement de {len(projects_to_process)} projet(s)")
        
        all_events = []
        
        for i, project in enumerate(projects_to_process, 1):
            project_id = project.get('id')
            if not project_id:
                continue
                
            project_name = project.get('name', 'N/A')
            
            print(f"  üìÇ [{i}/{len(projects_to_process)}] {project_name}")
            
            try:
                project_events = EventExtractor._extract_project_events(
                    gl_client, int(project_id), project_name, after_date, before_date
                )
                all_events.extend(project_events)
                
            except Exception as e:
                print(f"    ‚ùå Erreur projet {project_name}: {e}")
                continue
        
        if not all_events:
            print("‚ö†Ô∏è Aucun √©v√©nement trouv√©")
            return pd.DataFrame()
        
        # Cr√©er le DataFrame final
        df = pd.DataFrame(all_events)
        df = EventExtractor._process_dataframe(df)
        
        print(f"‚úÖ {len(df)} √©v√©nements extraits au total")
        return df
    
    @staticmethod
    def _extract_project_events(
        gl_client, 
        project_id: int, 
        project_name: str,
        after_date: Optional[str],
        before_date: Optional[str]
    ) -> List[Dict[str, Any]]:
        """Extrait les √©v√©nements d'un projet sp√©cifique"""
        try:
            project = gl_client.projects.get(project_id, lazy=True)
            
            # Param√®tres de requ√™te
            params = {'all': True, 'sort': 'desc'}
            if after_date:
                params['after'] = after_date
            if before_date:
                params['before'] = before_date
            
            # R√©cup√©rer les √©v√©nements
            events = project.events.list(**params)
            
            if not events:
                return []
            
            # Convertir en dictionnaires
            project_events = []
            for event in events:
                event_data = EventExtractor._process_single_event(event, project_name)
                if event_data:
                    project_events.append(event_data)
            
            return project_events
            
        except Exception as e:
            print(f"    ‚ö†Ô∏è Erreur extraction projet {project_id}: {e}")
            return []
    
    @staticmethod
    def _process_single_event(event, project_name: str) -> Optional[Dict[str, Any]]:
        """Traite un √©v√©nement individuel"""
        try:
            return {
                'project_id': getattr(event, 'project_id', 0),
                'project_name': project_name,
                'event_id': getattr(event, 'id', 0),
                'author_name': getattr(event, 'author_name', 'N/A'),
                'author_username': getattr(event, 'author_username', 'N/A'),
                'created_at': format_gitlab_date(getattr(event, 'created_at', None)),
                'action_name': getattr(event, 'action_name', 'N/A'),
                'target_type': getattr(event, 'target_type', 'N/A'),
                'target_title': getattr(event, 'target_title', 'N/A'),
                'push_data_commit_count': getattr(event, 'push_data', {}).get('commit_count', 0) if hasattr(event, 'push_data') and event.push_data else 0,
                'note': getattr(event, 'note', {}).get('body', '')[:100] if hasattr(event, 'note') and event.note else ''
            }
        except Exception as e:
            print(f"    ‚ö†Ô∏è Erreur traitement √©v√©nement: {e}")
            return None
    
    @staticmethod
    def _process_dataframe(df: pd.DataFrame) -> pd.DataFrame:
        """Traitement final du DataFrame"""
        if df.empty:
            return df
        
        # Trier par ID d√©croissant (plus r√©cents en premier)
        if 'event_id' in df.columns:
            df = df.sort_values('event_id', ascending=False).reset_index(drop=True)
        
        return df


# Fonction de compatibilit√© avec l'ancienne API
def extract_events_by_project(
    gl_client,
    projects: List[Dict[str, Any]],
    after_date: Optional[str] = None,
    before_date: Optional[str] = None,
    max_projects: Optional[int] = None
) -> pd.DataFrame:
    """
    Fonction de compatibilit√© pour l'extraction d'√©v√©nements
    """
    return EventExtractor.extract_events_by_project(
        gl_client, projects, after_date, before_date, max_projects
    )


def main():
    """Fonction principale - D√âSACTIV√âE TEMPORAIREMENT"""
    print("‚ö†Ô∏è Cette fonction de test est d√©sactiv√©e apr√®s refactorisation")
    print("üí° Utilisez maestro_kenobi.py pour les extractions")


if __name__ == "__main__":
    main()
