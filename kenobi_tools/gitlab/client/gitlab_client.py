"""
Client de connexion GitLab - VERSION REFACTORIS√âE
Module principal pour √©tablir et g√©rer la connexion √† GitLab
Complexit√© cognitive r√©duite via s√©paration des responsabilit√©s
"""
import warnings
from typing import Optional

import gitlab as python_gitlab
import urllib3
from dotenv import load_dotenv

from .config_manager import ConfigManager
from .gitlab_validator import GitLabValidator

# Supprimer les warnings SSL et de pagination
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
warnings.filterwarnings("ignore", category=UserWarning, module="gitlab")


class GitLabClient:
    """Client GitLab avec gestion de la connexion et des erreurs - VERSION SIMPLIFI√âE"""

    def __init__(self, config_path: Optional[str] = None):
        """
        Initialise le client GitLab
        
        Args:
            config_path: Chemin vers le fichier de configuration (optionnel)
        """
        self.config = None
        self.client = None
        self.is_connected = False

        # Charger les variables d'environnement
        load_dotenv()

        # Charger la configuration via le gestionnaire d√©di√©
        if config_path:
            self.config = ConfigManager.load_config(config_path)
        else:
            self.config = ConfigManager.load_default_config()

    def connect(
        self, url: Optional[str] = None, token: Optional[str] = None
    ) -> python_gitlab.Gitlab:
        """
        √âtablit la connexion √† GitLab
        
        Args:
            url: URL de l'instance GitLab (optionnel, lu depuis config si non fourni)
            token: Token d'acc√®s GitLab (optionnel, lu depuis env/config si non fourni)
            
        Returns:
            Client GitLab authentifi√©
            
        Raises:
            Exception: En cas d'erreur de connexion
        """
        try:
            # D√©terminer les param√®tres via le validateur
            gitlab_url = GitLabValidator.determine_url(self.config, url)
            gitlab_token = GitLabValidator.determine_token(self.config, token)

            # Cr√©er et tester le client
            self.client = self._create_gitlab_client(gitlab_url, gitlab_token)
            self._test_connection()

            self.is_connected = True
            return self.client

        except python_gitlab.GitlabAuthenticationError as e:
            print(f"‚ùå Erreur d'authentification GitLab: {e}")
            print("üí° V√©rifiez votre token d'acc√®s")
            raise
        except python_gitlab.GitlabGetError as e:
            print(f"‚ùå Erreur d'acc√®s GitLab: {e}")
            raise
        except Exception as e:
            print(f"‚ùå Erreur de connexion GitLab: {e}")
            raise

    def _create_gitlab_client(self, gitlab_url: str, gitlab_token: str) -> python_gitlab.Gitlab:
        """
        Cr√©e le client GitLab avec les param√®tres appropri√©s
        
        Args:
            gitlab_url: URL de l'instance GitLab
            gitlab_token: Token d'authentification
            
        Returns:
            Client GitLab configur√©
        """
        print(f"üîó Connexion √† GitLab: {gitlab_url}")

        # Validation s√©curis√©e de l'URL
        if not GitLabValidator.validate_url_format(gitlab_url):
            raise ValueError(f"Format d'URL invalide: {gitlab_url}")

        # Configuration SSL bas√©e sur le domaine
        ssl_verify = not GitLabValidator.is_internal_domain(gitlab_url)
        
        return python_gitlab.Gitlab(
            url=gitlab_url,
            private_token=gitlab_token,
            ssl_verify=ssl_verify,
            timeout=30,
            retry_transient_errors=True
        )

    def _test_connection(self):
        """
        Teste la connexion GitLab
        """
        try:
            current_user = self.client.user  # type: ignore
            print(f"‚úÖ Connect√© en tant que: {current_user.name} ({current_user.username})")
            
            # Test d'acc√®s aux ressources
            projects = self.client.projects.list(owned=True, simple=True, per_page=1)  # type: ignore
            print(f"üîç Acc√®s v√©rifi√© - {len(projects)} projet(s) accessible(s)")
            
        except python_gitlab.GitlabAuthenticationError:
            raise python_gitlab.GitlabAuthenticationError("Token GitLab invalide ou expir√©")
        except python_gitlab.GitlabGetError as e:
            if e.response_code == 403:
                raise python_gitlab.GitlabGetError("Permissions insuffisantes")
            raise
        except Exception as e:
            raise ConnectionError(f"Erreur de test de connexion: {e}")

    def get_client(self) -> python_gitlab.Gitlab:
        """
        Retourne le client GitLab (se connecte automatiquement si n√©cessaire)
        
        Returns:
            Client GitLab authentifi√©
            
        Raises:
            ValueError: Si la connexion √©choue
        """
        if not self.is_connected or not self.client:
            self.connect()

        if not self.client:
            raise ValueError("Impossible d'√©tablir la connexion GitLab")

        return self.client

    def disconnect(self):
        """Ferme la connexion GitLab proprement"""
        if self.client:
            self.client = None
        self.is_connected = False
        print("üîå Connexion GitLab ferm√©e")

    def is_connection_active(self) -> bool:
        """
        V√©rifie si la connexion est toujours active
        
        Returns:
            True si la connexion est active
        """
        if not self.is_connected or not self.client:
            return False

        try:
            # Test simple pour v√©rifier la validit√© de la connexion
            self.client.user
            return True
        except Exception:
            return False
