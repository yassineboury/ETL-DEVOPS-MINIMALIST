#!/usr/bin/env python3
"""
Script de validation simple pour l'extracteur GitLab.

Alternative lightweight aux tests complets pytest.
Validation rapide des fonctionnalit√©s essentielles.

Author: DevSecOps Team
Date: 2025-08-12
"""

import os
import sys
from pathlib import Path

# Add project to path
sys.path.insert(0, str(Path(__file__).parent))

from gitlab_tools.config import get_default_config, validate_batch_size
from gitlab_tools.exceptions import GitLabExtractionError, ValidationError


def test_config():
    """Validation rapide de la configuration."""
    print("üîß Test Configuration...")
    
    try:
        config = get_default_config()
        assert config['batch']['size'] == 10
        assert validate_batch_size(0) == 5  # Min
        assert validate_batch_size(25) == 20  # Max
        print("‚úÖ Configuration OK")
        return True
    except Exception as e:
        print(f"‚ùå Configuration KO: {e}")
        return False


def test_exceptions():
    """Validation du syst√®me d'exceptions."""
    print("üö® Test Exceptions...")
    
    try:
        # Test cr√©ation exception
        error = GitLabExtractionError("Test error", project_id=123)
        assert "Test error" in str(error)
        assert "Project: 123" in str(error)
        
        # Test ValidationError
        val_error = ValidationError("Invalid data")
        assert isinstance(val_error, GitLabExtractionError)
        
        print("‚úÖ Exceptions OK")
        return True
    except Exception as e:
        print(f"‚ùå Exceptions KO: {e}")
        return False


def test_imports():
    """Validation que tous les imports fonctionnent."""
    print("üì¶ Test Imports...")
    
    try:
        from gitlab_tools.extractors.commits_extractor import CommitsExtractor
        from gitlab_tools.base_extractor import BaseExtractor
        from gitlab_tools.utils.batch_processor import GitLabBatchProcessor
        from gitlab_tools.utils.cache_manager import CacheManager
        print("‚úÖ Imports OK")
        return True
    except Exception as e:
        print(f"‚ùå Imports KO: {e}")
        return False


def test_real_instantiation():
    """Test d'instanciation r√©elle avec mock client."""
    print("üèóÔ∏è Test Instanciation R√©elle...")
    
    try:
        # Mock client simple pour les tests
        class MockGitLabClient:
            def __init__(self):
                self.projects = MockProjects()
                
        class MockProjects:
            def list(self, **_kwargs):
                return []
        
        mock_client = MockGitLabClient()
        
        # Test CommitsExtractor avec typing souple
        from gitlab_tools.extractors.commits_extractor import CommitsExtractor
        extractor = CommitsExtractor(mock_client, batch_size=5, enable_cache=False)  # type: ignore
        
        assert extractor.batch_size == 5
        assert extractor.enable_cache is False
        assert hasattr(extractor, 'config')
        
        print("‚úÖ Instanciation R√©elle OK")
        return True
    except Exception as e:
        print(f"‚ùå Instanciation R√©elle KO: {e}")
        return False


def main():
    """Lancer les validations essentielles."""
    print("üöÄ Validation ETL DevSecOps Minimalist")
    print("=" * 50)
    
    tests = [
        test_imports,
        test_config, 
        test_exceptions,
        test_real_instantiation
    ]
    
    results = []
    for test in tests:
        results.append(test())
        print()
    
    # R√©sum√©
    passed = sum(results)
    total = len(results)
    
    print("üìä R√©sultats:")
    print(f"‚úÖ {passed}/{total} validations pass√©es")
    
    if passed == total:
        print("üéâ Tout est OK - Pr√™t √† utiliser !")
        return 0
    else:
        print("‚ö†Ô∏è Certaines validations ont √©chou√©")
        return 1


if __name__ == "__main__":
    sys.exit(main())
