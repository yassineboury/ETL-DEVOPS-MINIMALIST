#!/usr/bin/env python3
"""
üìÖ EXTRACTION EVENTS GITLAB - VERSION SIMPLE        # Limiter le nombre de lignes si trop volumineux - SUPPRIM√â
        # if len(df_events) > 10000:
        #     print(f"‚ö†Ô∏è Fichier volumineux ({len(df_events)} √©v√©nements). Limitation √† 10 000 lignes les plus r√©centes.")
        #     df_events_sorted = df_events.sort_values('created_at', ascending=False)
        #     df_events = df_events_sorted.head(10000).copy()n simplifi√©e pour r√©soudre les probl√®mes d'ouverture Excel
"""

import sys
import pandas as pd
from pathlib import Path
from dotenv import load_dotenv

# Ajouter le projet au path
project_root = Path(__file__).parent.parent.parent.parent
sys.path.insert(0, str(project_root))

from gitlab_tools.client.gitlab_client import create_gitlab_client
from gitlab_tools.extractors.events_extractor import extract_events


def choose_period():
    """
    Propose un menu interactif pour choisir la p√©riode d'extraction
    
    Returns:
        int: Nombre de jours en arri√®re (ou None pour toutes les dates)
    """
    print("üìÖ CHOIX DE LA P√âRIODE D'EXTRACTION")
    print("=" * 40)
    print("1Ô∏è‚É£  30 derniers jours")
    print("2Ô∏è‚É£  Derni√®re ann√©e (365 jours)")
    print("3Ô∏è‚É£  Toutes les dates (extraction compl√®te)")
    print("=" * 40)
    
    while True:
        try:
            choice = input("Votre choix (1, 2 ou 3): ").strip()
            
            if choice == "1":
                print("‚úÖ S√©lection: 30 derniers jours")
                return 30
            elif choice == "2":
                print("‚úÖ S√©lection: Derni√®re ann√©e (365 jours)")
                return 365
            elif choice == "3":
                print("‚úÖ S√©lection: Toutes les dates")
                return None  # None = pas de limitation
            else:
                print("‚ùå Choix invalide. Veuillez entrer 1, 2 ou 3.")
                
        except KeyboardInterrupt:
            print("\n‚ùå Extraction annul√©e par l'utilisateur")
            sys.exit(1)
        except Exception:
            print("‚ùå Erreur de saisie. Veuillez r√©essayer.")


def export_events_simple(df_events: pd.DataFrame, filename: str = "gitlab_events_simple.xlsx"):
    """
    Export Excel simplifi√© sans formatage complexe
    
    Args:
        df_events: DataFrame des √©v√©nements
        filename: Nom du fichier
        
    Returns:
        str: Chemin du fichier cr√©√©
    """
    try:
        # Cr√©er le r√©pertoire d'export s'il n'existe pas
        export_dir = Path("exports/gitlab")
        export_dir.mkdir(parents=True, exist_ok=True)
        
        file_path = export_dir / filename
        
        # PAS DE LIMITATION - extraire tous les √©v√©nements pour Power BI
        # (ancienne limitation supprim√©e)
        
        # Export simple sans formatage complexe
        with pd.ExcelWriter(file_path, engine='openpyxl') as writer:
            # Feuille principale
            df_events.to_excel(writer, sheet_name='√âv√©nements', index=False)
            
            # Feuille de statistiques simples
            stats_data = {
                'M√©trique': [
                    'Nombre total d\'√©v√©nements',
                    'P√©riode d\'extraction', 
                    'Date d\'export',
                    'Types d\'actions uniques',
                    'Projets concern√©s'
                ],
                'Valeur': [
                    len(df_events),
                    'Variable selon s√©lection',
                    pd.Timestamp.now().strftime('%d/%m/%Y %H:%M:%S'),
                    df_events['nom_action'].nunique() if 'nom_action' in df_events.columns else 'N/A',
                    df_events['nom_projet'].nunique() if 'nom_projet' in df_events.columns else 'N/A'
                ]
            }
            
            # SUPPRESSION DE LA FEUILLE STATISTIQUES - UNE SEULE FEUILLE DEMAND√âE
            # stats_df = pd.DataFrame(stats_data)
            # stats_df.to_excel(writer, sheet_name='Statistiques', index=False)
            
        print(f"‚úÖ Export simple r√©ussi: {file_path}")
        file_size = file_path.stat().st_size / 1024  # KB
        print(f"üìä Fichier cr√©√©: {file_path.name} ({file_size:.1f} KB)")
        return str(file_path)
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'export simple: {e}")
        return ""


def extract_events_to_excel_simple(days_back=None):
    """
    Extraction simple des events GitLab vers Excel (sans formatage complexe)
    
    Args:
        days_back: Nombre de jours en arri√®re pour filtrer les √©v√©nements (None = toutes les dates)
    """
    print("üìÖ EXTRACTION EVENTS GITLAB - VERSION SIMPLE")
    print("=" * 50)
    
    if days_back is not None:
        print(f"üìÖ P√©riode: {days_back} derniers jours")
    else:
        print("üìÖ P√©riode: Toutes les dates")
    print()
    
    gitlab_client = None  # Initialiser la variable
    
    try:
        # 1. Charger la configuration
        print("üîë Chargement de la configuration...")
        load_dotenv()
        
        # 2. Connexion GitLab
        print("üåê Connexion √† GitLab ONCF...")
        gitlab_client = create_gitlab_client()
        gl = gitlab_client.connect()
        
        if not gl:
            print("‚ùå Impossible de se connecter √† GitLab")
            return False
            
        print("‚úÖ Connexion GitLab √©tablie")
        
        # 3. Extraction des events
        if days_back is not None:
            print(f"üìÖ Extraction des events GitLab ({days_back} derniers jours)...")
        else:
            print("üìÖ Extraction de tous les events GitLab...")
        events_df = extract_events(gl, include_archived=False, days_back=days_back)
        
        if events_df.empty:
            print("‚ùå Aucun event trouv√©")
            return False
            
        events_count = len(events_df)
        print(f"‚úÖ {events_count} events extraits")
        
        # 4. Export vers Excel (version simple)
        print("üìä Export vers Excel (version simple)...")
        excel_file = export_events_simple(events_df, filename="gitlab_events_simple.xlsx")
        
        if excel_file:
            print(f"‚úÖ Fichier cr√©√©: {Path(excel_file).name}")
            print(f"üìÇ Emplacement: {excel_file}")
            return True
        else:
            print("‚ùå Erreur lors de la cr√©ation du fichier Excel")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False
    finally:
        # Fermer la connexion
        if gitlab_client is not None:
            gitlab_client.disconnect()
            print("üîå Connexion ferm√©e")


if __name__ == "__main__":
    print("üöÄ Lancement de l'extraction events (version simple)...")
    
    # Menu interactif pour choisir la p√©riode
    days_back = choose_period()
    
    # Lancer l'extraction avec la p√©riode choisie
    success = extract_events_to_excel_simple(days_back)
    
    if success:
        if days_back is not None:
            print(f"\nüéâ Extraction termin√©e avec succ√®s! (√©v√©nements des {days_back} derniers jours)")
        else:
            print("\nüéâ Extraction termin√©e avec succ√®s! (tous les √©v√©nements)")
    else:
        print("\n‚ùå Extraction √©chou√©e")
    
    sys.exit(0 if success else 1)
